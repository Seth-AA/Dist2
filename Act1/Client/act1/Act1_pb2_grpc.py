# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
import sys

import act1.Act1_pb2 as Act1__pb2


class ChatStub(object):
  """message sending and receiving service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.HandShake = channel.unary_unary(
        '/tests.Chat/HandShake',
        request_serializer=Act1__pb2.Act1Request.SerializeToString,
        response_deserializer=Act1__pb2.basicMsg.FromString,
        )
    self.Dispatch = channel.unary_unary(
        '/tests.Chat/Dispatch',
        request_serializer=Act1__pb2.FullMsg.SerializeToString,
        response_deserializer=Act1__pb2.basicMsg.FromString,
        )
    self.Retrieve = channel.unary_stream(
        '/tests.Chat/Retrieve',
        request_serializer=Act1__pb2.basicMsg.SerializeToString,
        response_deserializer=Act1__pb2.FullMsg.FromString,
        )


class ChatServicer(object):
  """message sending and receiving service
  """

  def HandShake(self, request, context):
    """method to "stablish" a trusted connection
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Dispatch(self, request, context):
    """method to send a msg
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Retrieve(self, request, context):
    """method to recover the msgs received
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ChatServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'HandShake': grpc.unary_unary_rpc_method_handler(
          servicer.HandShake,
          request_deserializer=Act1__pb2.Act1Request.FromString,
          response_serializer=Act1__pb2.basicMsg.SerializeToString,
      ),
      'Dispatch': grpc.unary_unary_rpc_method_handler(
          servicer.Dispatch,
          request_deserializer=Act1__pb2.FullMsg.FromString,
          response_serializer=Act1__pb2.basicMsg.SerializeToString,
      ),
      'Retrieve': grpc.unary_stream_rpc_method_handler(
          servicer.Retrieve,
          request_deserializer=Act1__pb2.basicMsg.FromString,
          response_serializer=Act1__pb2.FullMsg.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'tests.Chat', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class ClientsStub(object):
  """service to get the complete list of clients
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetClients = channel.unary_stream(
        '/tests.Clients/GetClients',
        request_serializer=Act1__pb2.basicMsg.SerializeToString,
        response_deserializer=Act1__pb2.Act1Request.FromString,
        )


class ClientsServicer(object):
  """service to get the complete list of clients
  """

  def GetClients(self, request, context):
    """method to show all the clients
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ClientsServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetClients': grpc.unary_stream_rpc_method_handler(
          servicer.GetClients,
          request_deserializer=Act1__pb2.basicMsg.FromString,
          response_serializer=Act1__pb2.Act1Request.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'tests.Clients', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class GetAllStub(object):
  """service to get all messages sent by the client
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetAllSent = channel.unary_stream(
        '/tests.GetAll/GetAllSent',
        request_serializer=Act1__pb2.basicMsg.SerializeToString,
        response_deserializer=Act1__pb2.FullMsg.FromString,
        )


class GetAllServicer(object):
  """service to get all messages sent by the client
  """

  def GetAllSent(self, request, context):
    """method to retrieve every sent message by a user
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GetAllServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetAllSent': grpc.unary_stream_rpc_method_handler(
          servicer.GetAllSent,
          request_deserializer=Act1__pb2.basicMsg.FromString,
          response_serializer=Act1__pb2.FullMsg.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'tests.GetAll', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
